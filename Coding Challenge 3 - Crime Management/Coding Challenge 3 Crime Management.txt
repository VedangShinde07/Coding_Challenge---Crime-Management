Coding Challenge 3: Crime Management

CREATED TABLES:
CREATE TABLE Crime ( 
CrimeID INT PRIMARY KEY, 
IncidentType VARCHAR(255), 
IncidentDate DATE, 
Location VARCHAR(255), 
Description TEXT, 
Status VARCHAR(20) ); 

CREATE TABLE Victim ( 
VictimID INT PRIMARY KEY, 
CrimeID INT, Name VARCHAR(255), 
ContactInfo VARCHAR(255), 
Injuries VARCHAR(255), 
FOREIGN KEY (CrimeID) REFERENCES Crime(CrimeID) ); 

CREATE TABLE Suspect (
SuspectID INT PRIMARY KEY, 
CrimeID INT, Name VARCHAR(255), 
Description TEXT, 
CriminalHistory TEXT, 
FOREIGN KEY (CrimeID) REFERENCES Crime(CrimeID) ); 





 


INSERTED VALUES IN TABLES:
INSERT INTO Crime (CrimeID, IncidentType, IncidentDate, Location, Description, Status) 
VALUES (1, 'Robbery', '2023-09-15', '123 Main St, Cityville', 'Armed robbery at a convenience store', 'Open'), 
(2, 'Homicide', '2023-09-20', '456 Elm St, Townsville', 'Investigation into a murder case', 'Under Investigation'),
(3, 'Theft', '2023-09-10', '789 Oak St, Villagetown', 'Shoplifting incident at a mall', 'Closed'); 
(4, 'Assault', '2023-09-25', '101 Pine St, Rivertown', 'Physical altercation at a bar', 'Open'),
 (5, 'Burglary', '2023-09-28', '202 Cedar St, Forestville', 'Residential burglary', 'Closed'),
 (6, 'Vandalism', '2023-09-18', '303 Maple St, Suburbtown', 'Graffiti on public property', 'Open'),
 (7, 'Fraud', '2023-09-12', '404 Birch St, Metrocity', 'Identity theft and credit card fraud', 'Under Investigation');

INSERT INTO Victim (VictimID, CrimeID, Name, ContactInfo, Injuries) 
VALUES (1, 1, 'John Doe', 'johndoe@example.com', 'Minor injuries'), 
(2, 2, 'Jane Smith', 'janesmith@example.com', 'Deceased'), 
(3, 3, 'Alice Johnson', 'alicejohnson@example.com', 'None'); 
(4, 4, 'Bob Williams', 'bobwilliams@example.com', 'Broken arm', '1987-08-15', 37),
(5, 5, 'Karen Davis', 'karendavis@example.com', 'None', '1979-04-22', 45),
(6, 6, 'Tom Brown', 'tombrown@example.com', 'None', '1990-11-30', 33),
(7, 7, 'Linda Green', 'lindagreen@example.com', 'Financial loss', '1985-02-05', 39);

INSERT INTO Suspect (SuspectID, CrimeID, Name, Description, CriminalHistory) 
VALUES (1, 1, 'Robber 1', 'Armed and masked robber', 'Previous robbery convictions'), 
(2, 2, 'Unknown', 'Investigation ongoing', NULL), 
(3, 3, 'Suspect 1', 'Shoplifting suspect', 'Prior shoplifting arrests');
(4, 4, 'Assailant 1', 'Suspect in a bar fight', 'Previous assault charges'),
(5, 5, 'Burglar 1', 'Suspected of breaking into homes', 'Prior burglary convictions'),
(6, 6, 'Vandal 1', 'Suspected of defacing public property', 'Previous vandalism charges'),
(7, 7, 'Fraudster 1', 'Identity theft suspect', 'Previous fraud convictions');

ALTER TABLE Victim ADD COLUMN DOB DATE
ALTER TABLE Suspect ADD COLUMN DOB DATE;
ALTER TABLE Victim ADD COLUMN AGE INT;
ALTER TABLE Suspect ADD COLUMN AGE INT;


UPDATE Victim SET DOB = '1985-05-15', AGE = 39 WHERE VictimID = 1;
UPDATE Victim SET DOB = '1979-09-20', AGE = 45 WHERE VictimID = 2;
UPDATE Victim SET DOB = '1995-03-10', AGE = 28 WHERE VictimID = 3;
UPDATE Victim SET DOB = '1987-08-15', AGE = 37 WHERE VictimID = 4;
UPDATE Victim SET DOB = '1979-04-22', AGE = 45 WHERE VictimID = 5;
UPDATE Victim SET DOB = '1990-11-30', AGE = 33 WHERE VictimID = 6;
UPDATE Victim SET DOB = '1985-02-15', AGE = 39 WHERE VictimID = 7;

UPDATE Suspect SET DOB = '1980-11-22', AGE = 44 WHERE SuspectID = 1;
UPDATE Suspect SET DOB = '1990-08-30', AGE = 34 WHERE SuspectID = 2;
UPDATE Suspect SET DOB = '1989-06-12', AGE = 35 WHERE SuspectID = 3;
UPDATE Suspect SET DOB = '1985-12-05', AGE = 38 WHERE SuspectID = 4;
UPDATE Suspect SET DOB = '1983-07-19', AGE = 41 WHERE SuspectID = 5;
UPDATE Suspect SET DOB = '1992-09-10', AGE = 32 WHERE SuspectID = 6;
UPDATE Suspect SET DOB = '1988-01-15', AGE = 36 WHERE SuspectID = 7;

Q.1. Select All Open Incidents:
-> SELECT * FROM Crime WHERE Status = 'Open';

Q.2. Find the Total number of incidents:
-> SELECT COUNT(*) AS TotalIncidents FROM CRIME;

Q.3. List all unique incident types:
-> SELECT DISTINCT(IncidentType) FROM Crime;

Q.4. Retrieve incidents that occurred between '2023-09-01' and '2023-09-10'.
-> 	SELECT IncidentType 
FROM Crime
 WHERE IncidentDate BETWEEN '2023-09-01' AND '2023-09-10';
Q.5. List persons involved in incidents in descending order of age.
-> 	SELECT Name , AGE 
FROM suspect
UNION ALL
SELECT Name , AGE
FROM victim
ORDER BY AGE DESC;

Q.6.  Find the average age of persons involved in incidents.
-> 	SELECT AVG(AGE)
FROM Victim
UNION ALL
SELECT AVG(AGE)	
FROM suspect;


Q.7. List incident types and their counts, only for open cases.
-> 	SELECT IncidentType, COUNT(*) AS IncidentCount 
FROM Crime 
WHERE Status = 'Open' GROUP BY IncidentType;

Q.8. Find persons with names containing 'Doe'.
-> 	SELECT Name FROM Victim 
WHERE Name LIKE '%Doe%' 
UNION SELECT 
Name FROM Suspect WHERE Name LIKE '%Doe%';

Q.9. Retrieve the names of persons involved in open cases and closed cases:
-> 	FOR STATUS = CLOSED
SELECT Name FROM Victim 
JOIN Crime ON Victim.CrimeID = Crime.CrimeID 
WHERE Status = 'Closed' 
UNION 
SELECT Name FROM Suspect JOIN Crime ON Suspect.CrimeID = Crime.CrimeID 
WHERE Status = 'Closed';

FOR STATUS = OPEN
SELECT Name FROM Victim 
JOIN Crime ON Victim.CrimeID = Crime.CrimeID 
WHERE Status = 'Open' 
UNION 
SELECT Name FROM Suspect JOIN Crime ON Suspect.CrimeID = Crime.CrimeID 
WHERE Status = 'Open';

Q.10. List incident types where there are persons aged 30 or 35 involved.
-> 	

Q.11. Find persons involved in incidents of the same type as 'Robbery':
-> 	SELECT Name FROM Victim 
JOIN Crime ON Victim.CrimeID = Crime.CrimeID 
WHERE IncidentType = 'Robbery' 
UNION 
SELECT Name FROM Suspect JOIN Crime ON Suspect.CrimeID = Crime.CrimeID 
WHERE IncidentType = 'Robbery';

Q.12. List incident types with more than one open case:
-> 	SELECT IncidentType, COUNT(*) AS CaseCount
FROM Crime
WHERE Status = 'Open'
GROUP BY IncidentType
HAVING COUNT(*) > 1;

Q.13. List all incidents with suspects whose names also appear as victims in other incidents:
->	SELECT DISTINCT C.*
FROM Crime C
JOIN Suspect S ON C.CrimeID = S.CrimeID
JOIN Victim V ON S.Name = V.Name;

Q.14. Retrieve all incidents along with victim and suspect details:
-> 	SELECT C.*, V.Name AS VictimName, S.Name AS SuspectName
FROM Crime C
LEFT JOIN Victim V ON C.CrimeID = V.CrimeID
LEFT JOIN Suspect S ON C.CrimeID = S.CrimeID;

Q.15. Find incidents where the suspect is older than any victim:
-> 	SELECT DISTINCT C.CrimeID, C.IncidentType
FROM Crime C
JOIN Victim V ON C.CrimeID = V.CrimeID
JOIN Suspect S ON C.CrimeID = S.CrimeID
WHERE S.AGE > V.AGE;

Q.16. Find suspects involved in multiple incidents:
-> 	SELECT Name, COUNT(*) AS IncidentCount
FROM Suspect
GROUP BY Name
HAVING COUNT(*) > 1;

Q.17. List incidents with no suspects involved:
-> 	SELECT C.* FROM Crime C 
LEFT JOIN Suspect S 
ON C.CrimeID = S.CrimeID 
WHERE S.SuspectID IS NULL;

Q.18. List all cases where at least one incident is of type 'Homicide' and all other incidents are of type 'Robbery':
-> 	

Q.19. Retrieve a list of all incidents and the associated suspects, showing suspects for each incident, or 'No Suspect' if there are none:
-> SELECT C.*, COALESCE(S.Name, 'No Suspect') AS SuspectName
FROM Crime C
LEFT JOIN Suspect S ON C.CrimeID = S.CrimeID;


Q.20. List all suspects who have been involved in incidents with incident types 'Robbery' or 'Assault':
-> 	SELECT DISTINCT S.Name
FROM Suspect S
JOIN Crime C ON S.CrimeID = C.CrimeID
WHERE C.IncidentType IN ('Robbery', 'Assault');



